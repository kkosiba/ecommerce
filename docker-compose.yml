services:
  db:
    image: postgres
    env_file: backend/.env
    healthcheck:
      test: ["CMD", "pg_isready", "-d", $POSTGRES_DB, "-U", $POSTGRES_USER]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  migration:
    build:
      dockerfile: development.dockerfile
      context: backend
    command: ["python", "manage.py", "migrate"]
    env_file: backend/.env
    volumes:
      - ./backend:/opt/project/backend
    depends_on:
      db:
        condition: service_healthy

  load_fixtures:
    build:
      dockerfile: development.dockerfile
      context: backend
    command: ["python", "manage.py", "loaddata", "src/apps/products/fixture.json"]
    env_file: backend/.env
    volumes:
      - ./backend:/opt/project/backend
    depends_on:
      db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully

  backend:
    build:
      dockerfile: development.dockerfile
      context: backend
    command: ["python", "manage.py", "runserver", "0.0.0.0:8000"]
    env_file: backend/.env
    volumes:
      - ./backend:/opt/project/backend
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
      load_fixtures:
        condition: service_completed_successfully

  frontend:
    build:
      dockerfile: Dockerfile
      context: frontend
    command: ["npm", "start"]
    env_file: frontend/.env.development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Ensure node_modules are stored inside the container
    depends_on:
      backend:
        condition: service_started
